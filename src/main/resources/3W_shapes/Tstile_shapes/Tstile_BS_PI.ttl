@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/TT-shapes/>.

# If a pawn is moved two spaces in window 1, it can't be moved again two spaces in window 3, or window 5
# Need:
# - Piece info
# - Streaming data
# - Board status
shape:PawnMove
    a sh:NodeShape ;
    sh:targetClass :Pawn;
    sh:message "Pawn moved two spaces twice";
    sh:not[
          sh:property [
                          sh:path (:movesFrom_t1 :below :below);
                          sh:minCount 1;
                          sh:equals :movesTo_t1  ;
                      ];
          sh:property [
                          sh:path (:movesFrom_t3 :below :below);
                          sh:minCount 1;
                          sh:equals :movesTo_t3 ;
                      ]
      ];
    sh:not[
          sh:property [
                          sh:path (:movesFrom_t1 :above :above);
                          sh:equals :movesTo_t1 ;
                          sh:minCount 1;
                      ];
          sh:property [
                          sh:path (:movesFrom_t3 :above :above);
                          sh:equals :movesTo_t3 ;
                          sh:minCount 1;
                      ]
      ] .


# If piece moved out in window 1, can't be moved again
# Need:
# - structure
shape:MovedOffBoard
    a sh:NodeShape ;
    sh:targetSubjectsOf :movesTo_t1 ;
    sh:message "Piece that was captured cannot move again";
    sh:or(
           [ sh:property [
                         sh:path :movesTo_t1 ;
                        sh:hasValue :offBoard ;
                         ];
             sh:property [
                         sh:path :movesTo_t3 ;
                        sh:maxCount 0;
                         ]
           ]
           [
            sh:property [
                        sh:path :movesTo_t1 ;
                        sh:not[ sh:hasValue :offBoard ];
                        ];
            sh:node shape:ColourTurn ;
           ]
         ).

# Need:
# - PI
shape:ColourTurn
    a sh:NodeShape ;
    sh:message "Black piece then white piece";
    sh:sparql [
                          a           sh:SPARQLConstraint ;
                          sh:message "Player can't move twice in a row";
                          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                        sh:declare [ sh:prefix "rdf" ;
                                                     sh:namespace
                                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                          sh:select   """
                        SELECT $this
                        WHERE {
                            $this :hasColour ?colour1.
                            ?secondMove :movesTo_t2 ?x;
                                        :hasColour ?colour2.
                            ?thirdMove :movesTo_t3 ?y;
                                        :hasColour ?colour3.

                            FILTER((?colour1 = ?colour2 || ?colour1 != ?colour3) && (?x != :offBoard && ?y != :offBoard))
                        }


                            """ ].