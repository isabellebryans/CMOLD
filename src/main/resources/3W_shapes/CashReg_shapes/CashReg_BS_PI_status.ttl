@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/CR-shapes/>.

# If piece is captured, it must be off board in next window
# Only requires 2 windows
:isCaptured
    a sh:NodeShape ;
    sh:targetObjectsOf :movesTo_t1 ;
    sh:message "Piece captured is still on the board";
    sh:or(
                # no piece was captured
                [
                    sh:property [
                                sh:path [sh:inversePath :occupiesPosition ];
                                sh:maxCount 0;
                                ]
                ]
                # piece was captured and now if off board
                [
                    sh:property [
                                sh:path [sh:inversePath :occupiesPosition ];
                                sh:minCount 1;
                                sh:property [
                                            sh:path :occupiesPosition_t1 ;
                                            sh:hasValue :offBoard ;
                                            ]
                                ]
                ]
                ).


# Can't move twice in a row except if captured
shape:MoveTwiceT1
    a sh:NodeShape ;
    sh:targetSubjectsOf :movesTo_t1 ;
    sh:message "Piece moved twice in a row";
    sh:not[
          sh:property [
                      sh:path :movesTo_t2 ;
                        sh:class :tile;
                        sh:minCount 1;
                      ]
          ].

# Can't move twice in a row except if captured
shape:MoveTwiceT2
    a sh:NodeShape ;
    sh:targetSubjectsOf :movesTo_t2 ;
    sh:message "Piece moved twice in a row";
    sh:not[
          sh:property [
                          sh:path :movesTo_t3 ;
                          sh:class :tile;
                          sh:minCount 1;
                      ]
      ].


# If white piece moves, then black piece must move
shape:OrderOfColour
    a sh:NodeShape ;
    sh:targetSubjectsOf :movesTo_t1 ;
    sh:message "Player can't move twice in a row";
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message "Player can't move twice in a row";
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                        SELECT $this
                        WHERE {
                            $this :hasColour ?colour1.
                            ?secondMove :movesTo_t2 ?x;
                                        :hasColour ?colour2.
                            ?thirdMove :movesTo_t3 ?y;
                                        :hasColour ?colour3.

                            FILTER(?colour1 = ?colour2 || ?colour1 != ?colour3)
                        }


                            """ ].

# If a pawn is moved two spaces in window 1, it can't be moved again two spaces in window 3, or window 5
# Need:
# - Piece info
# - Streaming data
# - Board structure
shape:PawnMove
    a sh:NodeShape ;
    sh:targetClass :Pawn;
    sh:message "Pawn moved two spaces twice";
    sh:not[
          sh:property [
                          sh:path (:movesTo_t1 :below :below);
                          sh:minCount 1;
                          sh:equals :occupiesPosition  ;
                      ];
          sh:property [
                          sh:path (:movesTo_t3 :below :below);
                          sh:minCount 1;
                          sh:equals :occupiesPosition_t2 ;
                      ]
      ];
    sh:not[
          sh:property [
                          sh:path (:movesTo_t1 :above :above);
                          sh:equals :occupiesPosition ;
                          sh:minCount 1;
                      ];
          sh:property [
                          sh:path (:movesTo_t3 :above :above);
                          sh:equals :occupiesPosition_t2 ;
                          sh:minCount 1;
                      ]
      ] .
