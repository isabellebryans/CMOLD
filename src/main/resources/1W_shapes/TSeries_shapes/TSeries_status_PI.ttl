@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix : <http://example.org/chess/>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix shape: <http://example.org/chess/TS-shapes/>.

# Can't validate piece move
# Have to assume that it is valid

# General shape:
shape:GeneralShape
    a sh:NodeShape ;
    sh:targetClass :ChessPiece ;
    sh:or(
            [ sh:property shape:PieceNotMoved ]
            [ sh:node shape:PieceMoved ]
         ).

shape:PieceNotMoved
    a sh:PropertyShape ;
    sh:path :occupiesPosition ;
    sh:equals :occupiesPosition_t1 .

shape:PieceMoved
    a sh:NodeShape ;
    sh:not[
            sh:property shape:PieceNotMoved ;
          ];
    sh:property shape:CapturedPiece .

# Piece can either have captured a piece or not
# works
shape:CapturedPiece
    a sh:PropertyShape ;
    sh:path :occupiesPosition_t1 ;
    sh:or(
          [
              sh:property [
                              # There was a piece captured
                              sh:path[sh:inversePath :occupiesPosition];
                              sh:minCount  1;

                              sh:property [
                                         sh:path :occupiesPosition_t1 ;
                                         sh:hasValue :offBoard;
                                         sh:minCount 1;
                                     ]]
          ]
          [
              sh:property [
                              # There was a piece captured
                              sh:path[sh:inversePath :occupiesPosition];
                              sh:maxCount 0;
                          ]
          ]
      ).

shape:CantCaptureKing
    a sh:NodeShape ;
    sh:not[
          sh:path :occupiesPosition_t1;
            sh:property [
                        sh:path [ sh:inversePath :occupiesPosition ];
                        sh:class :King;
                        ]
          ].

shape:CaptureOtherColour
    a sh:NodeShape ;
    sh:or (
          [
              # white can only capture black
              sh:property [
                              sh:path :hasColour ;
                              sh:hasValue :white;
                          ];
              sh:property [
                              sh:path :occupiesPosition_t1 ;
                              sh:property [
                                          sh:path [sh:inversePath :occupiesPosition ];
                                          sh:property [
                                                      sh:path :hasColour ;
                                                      sh:hasValue :black;
                                                  ]
                                      ]
                          ];
          ]
          [
              # black can only capture white
              sh:property [
                              sh:path :hasColour ;
                              sh:hasValue :black;
                          ];
              sh:property [
                              sh:path :occupiesPosition_t1 ;
                              sh:property [
                                          sh:path [sh:inversePath :occupiesPosition ];
                                          sh:property [
                                                      sh:path :hasColour ;
                                                      sh:hasValue :white;
                                                  ]
                                      ]
                          ];
          ]

      ).