@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/TT-shapes/>.


# General shape:
shape:GeneralShape
    a sh:NodeShape ;
    sh:targetSubjectsOf :occupiesPosition_t1  ;
    sh:node shape:notSamePosition ;
    sh:property shape:sameAsBoardStatus ;
    sh:or(
            [ sh:node shape:hasBeenCaptured ]
            [
                sh:node shape:cantCaptureKing;
                sh:node shape:CaptureOtherColour;
                sh:property shape:CapturedPiece ;
            ]

         ).



# Piece moved ( in stream data) can't have same position
shape:notSamePosition
    a sh:NodeShape ;
    sh:message "Triple to add can't be the same as triple to be deleted";
    sh:not[
          sh:property [
                          sh:path :occupiesPosition_t0  ;
                          sh:equals :occupiesPosition_t1  ;
                      ]
      ].

# The previous position (ie. triple to delete) is the same position as board status
shape:sameAsBoardStatus
    a sh:PropertyShape ;
    sh:message "Triple to be deleted is not in the board status";
    sh:path :occupiesPosition_t0 ;
    sh:equals :occupiesPosition.

# Piece can either have captured a piece or not
shape:CapturedPiece
    a sh:PropertyShape ;
    sh:path :occupiesPosition_t1 ;
    sh:or(
          [
              sh:property [
                              # There was a piece captured
                              sh:path[sh:inversePath :occupiesPosition];
                              sh:minCount  1;

                              sh:property [
                                         sh:path :occupiesPosition_t1 ;
                                         sh:hasValue :offBoard;
                                         sh:minCount 1;
                                     ]]
          ]
          [
              sh:property [
                              # There was a piece captured
                              sh:path[sh:inversePath :occupiesPosition];
                              sh:maxCount 0;
                          ]
          ]
      ).

shape:CaptureOtherColour
    a sh:NodeShape ;
    sh:or (
          [
              # white can only capture black
              sh:property [
                              sh:path :hasColour ;
                              sh:hasValue :white;
                          ];
              sh:property [
                              sh:path :occupiesPosition_t0 ;
                              sh:property [
                                          sh:path [sh:inversePath :occupiesPosition_t1 ];
                                          sh:property [
                                                      sh:path :hasColour ;
                                                      sh:hasValue :black;
                                                  ]
                                      ]
                          ];
          ]
          [
              # black can only capture white
              sh:property [
                              sh:path :hasColour ;
                              sh:hasValue :black;
                          ];
              sh:property [
                              sh:path :occupiesPosition_t0 ;
                              sh:property [
                                          sh:path [sh:inversePath :occupiesPosition_t1 ];
                                          sh:property [
                                                      sh:path :hasColour ;
                                                      sh:hasValue :white;
                                                  ]
                                      ]
                          ];
          ]

      ).

shape:hasBeenCaptured
    a sh:NodeShape ;
    sh:node shape:CaptureOtherColour ;
    sh:property [
          sh:path :occupiesPosition_t1 ;
          sh:hasValue :offBoard;
      ];
    sh:property [
          sh:path :occupiesPosition_t0 ;
          sh:property [
                      sh:path [sh:inversePath :occupiesPosition_t1 ];
                      sh:minCount 1;
                  ];
      ].

shape:cantCaptureKing
    a sh:NodeShape  ;
    sh:not[
          sh:property [
                          sh:path :occupiesPosition_t1 ;
                          sh:property [
                                      sh:path [sh:inversePath :occupiesPosition ];
                                      sh:class :King;
                                      sh:minCount 1;
                                  ]
                      ];
      ].