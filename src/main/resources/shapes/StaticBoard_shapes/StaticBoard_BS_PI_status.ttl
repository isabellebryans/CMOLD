@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/shapes/>.
@prefix sh: <http://www.w3.org/ns/shacl#>.

# To implement :
# - pan can't be at the oppoite lat ro

shape:atMostOne
    a sh:NodeShape ;
    sh:targetClass :tile;
    sh:property [
                sh:path [sh:inversePath :occupiesPosition ];
                sh:maxCount 1;
                sh:class :ChessPiece ;
                sh:message "Two chesspieces occupy same tile."
                ].





# Kings always on a tile
# Kings not beside eachother
shape:KingOnBoard
    a sh:NodeShape ;
    sh:targetClass :King;
    sh:property [
                sh:path :occupiesPosition ;
                sh:class :tile ;
                ];
    sh:property [
                sh:path :occupiesPosition ;
                sh:message "Kings adjacent to each-other";
                sh:node[
                       sh:property [
                                       sh:path [sh:alternativePath ( :right  :left  :above  :below  :tl  :tr  :bl  :br )] ;
                                    sh:node [
                                                sh:not[ sh:path [sh:inversePath :occupiesPosition ];
                                                        sh:class :King;
                                                        sh:minCount 1;
                                                      ]]]
                                   ]].

## Every piece is on a tile or out
# Piece must be in a position that exists
shape:pieceInPosition
    a sh:NodeShape ;
    sh:targetClass :ChessPiece ;
    sh:message "Piece in a non-existing position";
    sh:property [
                sh:path :occupiesPosition ;
                sh:or(
                        [ sh:class :tile; ]
                        [ sh:hasValue :offBoard; ]
                     )
                ].

# Pawn must not be at either end of board
# It can't be on its own end, can't move backwards
# It can't be on opposite end, then it is promoted
shape:PawnAtEnd
    a sh:NodeShape ;
    sh:targetClass :Pawn;
    sh:message "Pawn is at the end of the board";
    sh:not[
            sh:or(
                    [
                        sh:property [
                                       sh:path (:occupiesPosition :row );
                                        sh:hasValue "8";
                                   ]
                    ]
                    [
                        sh:property [
                                        sh:path (:occupiesPosition :row );
                                        sh:hasValue "1";
                                    ]
                    ]
                 )
          ].