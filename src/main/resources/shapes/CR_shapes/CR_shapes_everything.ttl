@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/CR-shapes/>.

# Need to do: pawn moves two on first move
# Pawn move
# colour, change pawn move
# moved to cant be king -> done

# Knowing
# BS + PI + status + move

# Can validate:
# The piece moved must be moved into a position that is empty, or not
# The move must be a legal move depending on piece moved
# - King cannot be captured
# where they move is a tile

# Can't validate
# - Piece captured is indeed captured, can only see this in the next window bc there'll be two pieces in one tile
# - If a black piece is moved, then it must capture a white piece
# - only one piece moved at one time stamp
# - if piece captured, can't see if it is then out
# captured?

# General move
# the piece moved must adhere to exactly one of the piece move shapes
:GeneralMoveShape
    a sh:NodeShape ;
    sh:targetSubjectsOf :movesTo;
    sh:message "Invalid move";
    sh:node shape:cantCaptureKing ;
    sh:xone (
          [
              # Pawn was moved
              sh:node shape:PawnMove ;
          ]
          [
              # Rook was moved
              sh:node shape:RookMove ;
          ]
          [
              # Knight was moved
              sh:node shape:KnightMove ;
          ]
          [
              # Bishop was moved
              sh:node shape:BishopMove ;

          ]
          [
              # Queen was moved
              sh:node shape:QueenMove  ;
          ]
          [
              # King was moved
              sh:node shape:KingMove ;
          ]
      ).

shape:KingMove
    a sh:NodeShape ;
    sh:class :King ;
    sh:message "Invalid king move";
    sh:or(
          [ sh:node shape:MoveAdjStraight ]
          [ sh:node shape:MoveAdjDiagonal ]
      ).

shape:QueenMove
    a sh:NodeShape ;
    sh:class :Queen ;
    sh:message "Invalid queen move";
    sh:or(
          [ sh:node shape:MoveAdjStraight ]
          [ sh:node shape:MoveAdjDiagonal ]
          [ sh:node shape:MoveUpDown ]
          [ sh:node shape:MoveSideways ]
          [ sh:node shape:MoveDiagonal ]
      ).

shape:RookMove
    a sh:NodeShape ;
    sh:class :Rook ;
    sh:message "Invalid rook move";
    sh:or(
          [ sh:node shape:MoveAdjStraight ]
          [ sh:node shape:MoveUpDown ]
          [ sh:node shape:MoveSideways ]
      ).

shape:BishopMove
    a sh:NodeShape ;
    sh:class :Bishop ;
    sh:message "Invalid bishop move";
    sh:or(
          [ sh:node shape:MoveAdjDiagonal ]
          [ sh:node shape:MoveDiagonal ]
      ).

shape:KnightMove
    a sh:NodeShape ;
    sh:class :Knight ;
    sh:message "Invalid knight move";
    sh:property shape:moveToTile ;
    sh:or(
           [
               sh:path (:occupiesPosition  :tr :above);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :tr :right);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :tl :above);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :tl :left);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :bl :below);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :bl :left);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :br :below);
               sh:equals :movesTo ;
           ]
           [
               sh:path (:occupiesPosition  :br :right);
               sh:equals :movesTo ;
           ]
       ).

# Pawn Move Validation
# Option 1: Pawn has moved one space forward
# Option 2: Pawn has moved one space forward diagonally and has captured a piece
# Option 3: Pawn has been captured
shape:PawnMove
    a sh:NodeShape ;
    sh:class :Pawn;
    sh:message "Invalid pawn move";
    sh:or(
            [

                # Pawn has moved one space in front and did not capture any piece
                sh:property shape:moveToTile ;
                sh:property [
                                sh:path (:occupiesPosition  :above );
                                sh:equals :movesTo  ;
                                sh:class :tile;
                            ];
                sh:property [
                                sh:path :movesTo  ;
                                sh:property [
                                            sh:path [sh:inversePath :occupiesPosition ];
                                            sh:maxCount 0;
                                        ]
                            ];
            ]
            [
                    # Pawn moved diagonal, and captured piece
                sh:or(
                         [
                             sh:property [
                                             sh:path (:occupiesPosition  :tr );
                                             sh:class :tile;
                                             sh:equals :movesTo ;
                                         ];
                         ]
                         [
                             sh:property [
                                             sh:path (:occupiesPosition  :tl );
                                             sh:class :tile;
                                             sh:equals :movesTo ;
                                         ];
                         ]
                     );
                sh:property [
                         sh:path :movesTo ;
                         sh:property [
                                     sh:path [sh:inversePath :occupiesPosition ];
                                     sh:minCount 1;
                                 ]
                     ]
            ]
         ).


shape:MoveAdjStraight
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:or(
          [
              sh:path (:occupiesPosition :above );
              sh:equals :movesTo;
          ]
          [
              sh:path (:occupiesPosition :below );
              sh:equals :movesTo;
          ]
          [
              sh:path (:occupiesPosition :left );
              sh:equals :movesTo;
          ]
          [
              sh:path (:occupiesPosition :right );
              sh:equals :movesTo;
          ]
      ).

shape:MoveAdjDiagonal
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:or(
          [
              sh:path (:occupiesPosition :tl );
              sh:equals :movesTo;
          ]
          [
              sh:path (:occupiesPosition :tr );
              sh:equals :movesTo;
          ]
          [
              sh:path (:occupiesPosition :bl );
              sh:equals :movesTo;
          ]
          [
              sh:path (:occupiesPosition :br );
              sh:equals :movesTo;
          ]
      ).

shape:MoveUpDown
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    # Shacl sparql constraint checks if the column of new pos is same as old pos
    sh:sparql [ a           sh:SPARQLConstraint ;
                sh:message  "Invalid move: not on same column." ;
                sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                           sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                              sh:declare [ sh:prefix "rdf" ;
                                           sh:namespace
                                                     "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                sh:select   """
      SELECT $this
      WHERE {
        $this :occupiesPosition ?current ;
              :movesTo ?target .
        ?current :column ?col1.
        ?target :column ?col2.
        FILTER (?col1 != ?col2)
      }
    """ ];
    # Now check if there are any other pieces in the way
    sh:sparql [ a           sh:SPARQLConstraint ;
                sh:message  "Invalid move: overtaking is not allowed." ;
                sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                           sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                              sh:declare [ sh:prefix "rdf" ;
                                           sh:namespace
                                                     "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                sh:select   """
      SELECT $this ?current ?target ?intermediate
      WHERE {
        $this :occupiesPosition ?current ;
              :movesTo ?target .
        ?piece2 rdf:type :ChessPiece.
        ?piece2 :occupiesPosition ?tile.
        ?current :above+ ?intermediate .
        ?intermediate :above* ?target .
        FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
      }
    """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
      SELECT $this ?current ?target ?intermediate
      WHERE {
        $this :occupiesPosition ?current ;
              :movesTo ?target .
        ?piece2 rdf:type :ChessPiece.
        ?piece2 :occupiesPosition ?tile.
        ?current :below+ ?intermediate .
        ?intermediate :below* ?target .
        FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
      }
    """
      ] .


shape:MoveSideways
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: not on same row." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
      SELECT $this
      WHERE {
        $this :occupiesPosition ?current ;
              :movesTo ?target .
        ?current :row ?row1.
        ?target :row ?row2.
        FILTER (?row1 != ?row2)
      }
    """ ];
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :movesTo ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :occupiesPosition ?tile.
                    ?current :right+ ?intermediate .
                    ?intermediate :right* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :movesTo ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :occupiesPosition ?tile.
                    ?current :left+ ?intermediate .
                    ?intermediate :left* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ].

shape:MoveDiagonal
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:message  "Invalid move: not on same row." ;
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: not on same row." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ];
                        sh:declare [ sh:prefix "xs" ;
                                     sh:namespace
                                               "http://www.w3.org/2001/XMLSchema#"^^xs:anyURI ; ]] ;
          sh:select """
        SELECT $this
        WHERE {
            $this :occupiesPosition ?current ;
                  :movesTo ?target .
            ?current :row ?row1 ;
                     :colNo ?col1 .
            ?target :row ?row2 ;
                    :colNo ?col2 .


            FILTER ((xs:integer(?row1) - xs:integer(?row2)) != (xs:integer(?col1) - xs:integer(?col2)))
        }
    """ ];
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :movesTo ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :occupiesPosition ?tile.
                    ?current :tr+ ?intermediate .
                    ?intermediate :tr* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :movesTo ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :occupiesPosition ?tile.
                    ?current :tl+ ?intermediate .
                    ?intermediate :tl* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :movesTo ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :occupiesPosition ?tile.
                    ?current :br+ ?intermediate .
                    ?intermediate :br* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :movesTo ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :occupiesPosition ?tile.
                    ?current :bl+ ?intermediate .
                    ?intermediate :bl* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ].

shape:moveToTile
    a sh:PropertyShape ;
    sh:path :movesTo;
    sh:class :tile.

shape:cantCaptureKing
    a sh:NodeShape  ;
    sh:not[
            sh:property [
                sh:path :movesTo ;
                sh:class :King;
            ];
          ].



