@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/CR-shapes/>.

# Knowing:
# BS + status + move


# Piece moved must have moved in a valid chess move
# Use queen and knight moves only
shape:PieceShape
    a sh:NodeShape ;
    sh:targetSubjectsOf :occupiesPosition_t1 ;
    sh:property shape:moveToTile;
    sh:or(
          [ sh:node shape:QueenMove ]
          [ sh:node shape:KnightMove ]
      ).

shape:QueenMove
    a sh:NodeShape ;
    sh:node shape:PieceMoved ;
    sh:or(
        [ sh:node shape:MoveUpDown ]
        [ sh:node shape:MoveSideways ]
        [ sh:node shape:MoveDiagonal ]
        [ sh:node shape:MoveAdjStraight ]
        [ sh:node shape:MoveAdjDiagonal ]
      ).

shape:KnightMove
    a sh:NodeShape ;
    sh:class :Knight ;
    sh:message "Invalid knight move";
    sh:or(
          [
              sh:path (:occupiesPosition  :tr :above);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :tr :right);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :tl :above);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :tl :left);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :bl :below);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :bl :left);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :br :below);
              sh:equals :occupiesPosition_t1 ;
          ]
          [
              sh:path (:occupiesPosition  :br :right);
              sh:equals :occupiesPosition_t1 ;
          ]
      ).

shape:MoveAdjStraight
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:or(
          [
              sh:path (:occupiesPosition :above );
              sh:equals :occupiesPosition_t1;
          ]
          [
              sh:path (:occupiesPosition :below );
              sh:equals :occupiesPosition_t1;
          ]
          [
              sh:path (:occupiesPosition :left );
              sh:equals :occupiesPosition_t1;
          ]
          [
              sh:path (:occupiesPosition :right );
              sh:equals :occupiesPosition_t1;
          ]
      ).

shape:MoveAdjDiagonal
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:or(
          [
              sh:path (:occupiesPosition :tl );
              sh:equals :occupiesPosition_t1;
          ]
          [
              sh:path (:occupiesPosition :tr );
              sh:equals :occupiesPosition_t1;
          ]
          [
              sh:path (:occupiesPosition :bl );
              sh:equals :occupiesPosition_t1;
          ]
          [
              sh:path (:occupiesPosition :br );
              sh:equals :occupiesPosition_t1;
          ]
      ).

shape:MoveUpDown
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    # Shacl sparql constraint checks if the column of new pos is same as old pos
    sh:sparql [ a           sh:SPARQLConstraint ;
                sh:message  "Invalid move: not on same column." ;
                sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                           sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                              sh:declare [ sh:prefix "rdf" ;
                                           sh:namespace
                                                     "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                sh:select   """
      SELECT $this
      WHERE {
        $this :occupiesPosition ?current ;
              :occupiesPosition_t1 ?target .
        ?current :column ?col1.
        ?target :column ?col2.
        FILTER (?col1 != ?col2)
      }
    """ ];
    # Now check if there are any other pieces in the way
    sh:sparql [ a           sh:SPARQLConstraint ;
                sh:message  "Invalid move: overtaking is not allowed." ;
                sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                           sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                              sh:declare [ sh:prefix "rdf" ;
                                           sh:namespace
                                                     "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                sh:select   """
      SELECT $this ?current ?target ?intermediate
      WHERE {
        $this :occupiesPosition ?current ;
              :occupiesPosition_t1 ?target .
        ?piece2 :occupiesPosition ?tile.
        ?current :above+ ?intermediate .
        ?intermediate :above* ?target .
        FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
      }
    """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
      SELECT $this ?current ?target ?intermediate
      WHERE {
        $this :occupiesPosition ?current ;
              :occupiesPosition_t1 ?target .
        ?piece2 :occupiesPosition ?tile.
        ?current :below+ ?intermediate .
        ?intermediate :below* ?target .
        FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
      }
    """
      ] .


shape:MoveSideways
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: not on same row." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
      SELECT $this
      WHERE {
        $this :occupiesPosition ?current ;
              :occupiesPosition_t1 ?target .
        ?current :row ?row1.
        ?target :row ?row2.
        FILTER (?row1 != ?row2)
      }
    """ ];
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :occupiesPosition_t1 ?target .
                    ?piece2 :occupiesPosition ?tile.
                    ?current :right+ ?intermediate .
                    ?intermediate :right* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :occupiesPosition_t1 ?target .
                    ?piece2 :occupiesPosition ?tile.
                    ?current :left+ ?intermediate .
                    ?intermediate :left* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ].

shape:MoveDiagonal
    a sh:NodeShape ;
    sh:property shape:moveToTile ;
    sh:message  "Invalid move: not on same row." ;
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: not on same row." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ];
                        sh:declare [ sh:prefix "xs" ;
                                     sh:namespace
                                               "http://www.w3.org/2001/XMLSchema#"^^xs:anyURI ; ]] ;
          sh:select """
        SELECT $this
        WHERE {
            $this :occupiesPosition ?current ;
                  :occupiesPosition_t1 ?target .
            ?current :row ?row1 ;
                     :colNo ?col1 .
            ?target :row ?row2 ;
                    :colNo ?col2 .

            FILTER (((xs:integer(?row1) - xs:integer(?row2)) != (xs:integer(?col1) - xs:integer(?col2))) && ((xs:integer(?row2) - xs:integer(?row1)) != (xs:integer(?col1) - xs:integer(?col2))))

        }
    """ ];
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :occupiesPosition_t1 ?target .
                    ?piece2 :occupiesPosition ?tile.
                    ?current :tr+ ?intermediate .
                    ?intermediate :tr* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :occupiesPosition_t1 ?target .
                    ?piece2 :occupiesPosition ?tile.
                    ?current :tl+ ?intermediate .
                    ?intermediate :tl* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :occupiesPosition_t1 ?target .
                    ?piece2 :occupiesPosition ?tile.
                    ?current :br+ ?intermediate .
                    ?intermediate :br* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :occupiesPosition ?current ;
                          :occupiesPosition_t1 ?target .
                    ?piece2 :occupiesPosition ?tile.
                    ?current :bl+ ?intermediate .
                    ?intermediate :bl* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate && ?tile != ?target)
                  }
            """ ].



shape:PieceMoved
    a sh:NodeShape ;
    sh:not[
          sh:property shape:PieceNotMoved ;
      ].


shape:PieceNotMoved
    a sh:PropertyShape ;
    sh:path :occupiesPosition ;
    sh:equals :occupiesPosition_t1 .

shape:moveToTile
    a sh:PropertyShape ;
    sh:path :occupiesPosition_t1;
    sh:class :tile.
