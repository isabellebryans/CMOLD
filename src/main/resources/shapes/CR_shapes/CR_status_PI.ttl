@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.
@prefix shape: <http://example.org/chess/CR-shapes/>.

# General shape:
shape:GeneralShape
    a sh:NodeShape ;
    sh:targetSubjectsOf :occupiesPosition_t1  ;
    sh:node shape:notSamePosition ;
    sh:node shape:cantCaptureKing;
    sh:node shape:CaptureOtherColour.


shape:notSamePosition
    a sh:NodeShape ;
    sh:not[
          sh:property [
                          sh:path :occupiesPosition ;
                          sh:equals :occupiesPosition_t1 ;
                      ]
      ].

shape:cantCaptureKing
    a sh:NodeShape  ;
    sh:not[
          sh:property [
                          sh:path :occupiesPosition_t1 ;
                          sh:property [
                                      sh:path [sh:inversePath :occupiesPosition ];
                                      sh:class :King;
                                      sh:minCount 1;
                                  ]
                      ];
      ].
# if it moves and there is something there before, it must be the opposite colour
shape:CaptureOtherColour
    a sh:NodeShape ;
    sh:or (
          [
              # white can only capture black
              sh:property [
                              sh:path :hasColour ;
                              sh:hasValue :white;
                          ];
              sh:property [
                              sh:path :occupiesPosition_t1 ;
                              sh:property [
                                          sh:path [sh:inversePath :occupiesPosition ];
                                          sh:property [
                                                      sh:path :hasColour ;
                                                      sh:hasValue :black;
                                                  ]
                                      ]
                          ];
          ]
          [
              # black can only capture white
              sh:property [
                              sh:path :hasColour ;
                              sh:hasValue :black;
                          ];
              sh:property [
                              sh:path :occupiesPosition_t1 ;
                              sh:property [
                                          sh:path [sh:inversePath :occupiesPosition ];
                                          sh:property [
                                                      sh:path :hasColour ;
                                                      sh:hasValue :white;
                                                  ]
                                      ]
                          ];
          ]

      ).