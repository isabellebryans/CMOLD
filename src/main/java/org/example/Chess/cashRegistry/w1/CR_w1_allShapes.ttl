@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xs:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix : <http://example.org/chess/>.

# Knowing board status + pieces
# knowing pieces info
# knowing board status
# Knowing new piece
#

# Can validate:
# The piece moved must be moved into a position that is empty, or not
# The move must be a legal move depending on piece moved

# Can't validate
# - Piece captured is indeed captured, can only see this in the next window bc there'll be two pieces in one tile
# - If a black piece is moved, then it must capture a white piece
# - only one piece moved at one time stamp

# General move
:GeneralMoveShape
    a sh:NodeShape ;
    sh:targetSubjectsOf :to;
    sh:message "Invalid move";
    sh:property [
                sh:path :to;
                sh:class :position ; ];
    sh:xone (
            [
            # Pawn was moved
            sh:class :Pawn;
            ]
            [
            # Rook was moved
            sh:class :Rook;
            ]
            [
            # Knight was moved
            sh:class :Knight;
            ]
            [
            # Bishop was moved
            sh:class :Bishop;
            ]
            [
            # Queen was moved
            sh:class :Queen;
            sh:node :QueenShape  ;
            ]
            [
            # King was moved
            sh:class :King;
            sh:node :KingShape ;
            ]
          ).

:KingShape
    a sh:NodeShape ;
    sh:node :MovedAdjacentTo .


:QueenShape
    a sh:NodeShape ;
    sh:or(
            [ sh:node :hasBeenCaptured ]
            [ sh:node :MovedAdjacentTo ]
            [ sh:node :MoveUpDown ]
            [ sh:node :MoveSideways ]
            [ sh:node :MoveDiagonal ]
         ).



:MoveUpDown
    a sh:NodeShape ;
    # Shacl sparql constraint checks if the column of new pos is same as old pos
    sh:sparql [ a           sh:SPARQLConstraint ;
                sh:message  "Invalid move: not on same column." ;
                sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                           sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                              sh:declare [ sh:prefix "rdf" ;
                                           sh:namespace
                                                     "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                sh:select   """
      SELECT $this
      WHERE {
        $this :isIn ?current ;
              :to ?target .
        ?current :column ?col1.
        ?target :column ?col2.
        FILTER (?col1 != ?col2)
      }
    """ ];
    # Now check if there are any other pieces in the way
     sh:sparql [ a           sh:SPARQLConstraint ;
                          sh:message  "Invalid move: overtaking is not allowed." ;
                          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                        sh:declare [ sh:prefix "rdf" ;
                                                     sh:namespace
                                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                          sh:select   """
      SELECT $this ?current ?target ?intermediate
      WHERE {
        $this :isIn ?current ;
              :to ?target .
        ?piece2 rdf:type :ChessPiece.
        ?piece2 :isIn ?tile.
        ?current :above+ ?intermediate .
        ?intermediate :above* ?target .
        FILTER ($this != ?piece2 && ?tile = ?intermediate)
      }
    """ ];
    sh:sparql [
                              a           sh:SPARQLConstraint ;
                              sh:message  "Invalid move: overtaking is not allowed." ;
                              sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                                         sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                            sh:declare [ sh:prefix "rdf" ;
                                                         sh:namespace
                                                                   "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                              sh:select   """
      SELECT $this ?current ?target ?intermediate
      WHERE {
        $this :isIn ?current ;
              :to ?target .
        ?piece2 rdf:type :ChessPiece.
        ?piece2 :isIn ?tile.
        ?current :below+ ?intermediate .
        ?intermediate :below* ?target .
        FILTER ($this != ?piece2 && ?tile = ?intermediate)
      }
    """
            ] .

:MoveDiagonal
    a sh:NodeShape ;
    sh:message  "Invalid move: not on same row." ;
    sh:sparql [
                  a sh:SPARQLConstraint ;
                  sh:message  "Invalid move: not on same row." ;
                  sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                             sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                sh:declare [ sh:prefix "rdf" ;
                                             sh:namespace
                                                       "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ];
                                sh:declare [ sh:prefix "xs" ;
                                             sh:namespace
                                                       "http://www.w3.org/2001/XMLSchema#"^^xs:anyURI ; ]] ;
                  sh:select """
        SELECT $this
        WHERE {
            $this :isIn ?current ;
                  :to ?target .
            ?current :row ?row1 ;
                     :colNo ?col1 .
            ?target :row ?row2 ;
                    :colNo ?col2 .


            FILTER ((xs:integer(?row1) - xs:integer(?row2)) != (xs:integer(?col1) - xs:integer(?col2)))
        }
    """ ];
    sh:sparql [
                  a sh:SPARQLConstraint ;
                  sh:message  "Invalid move: overtaking is not allowed." ;
                  sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                             sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                sh:declare [ sh:prefix "rdf" ;
                                             sh:namespace
                                                       "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                  sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :isIn ?current ;
                          :to ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :isIn ?tile.
                    ?current :tr+ ?intermediate .
                    ?intermediate :tr* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate)
                  }
            """ ];
    sh:sparql [
                  a           sh:SPARQLConstraint ;
                  sh:message  "Invalid move: overtaking is not allowed." ;
                  sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                             sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                sh:declare [ sh:prefix "rdf" ;
                                             sh:namespace
                                                       "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                  sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :isIn ?current ;
                          :to ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :isIn ?tile.
                    ?current :tl+ ?intermediate .
                    ?intermediate :tl* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate)
                  }
            """ ];
    sh:sparql [
                  a           sh:SPARQLConstraint ;
                  sh:message  "Invalid move: overtaking is not allowed." ;
                  sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                             sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                sh:declare [ sh:prefix "rdf" ;
                                             sh:namespace
                                                       "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                  sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :isIn ?current ;
                          :to ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :isIn ?tile.
                    ?current :br+ ?intermediate .
                    ?intermediate :br* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate)
                  }
            """ ];
    sh:sparql [
                  a           sh:SPARQLConstraint ;
                  sh:message  "Invalid move: overtaking is not allowed." ;
                  sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                             sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                                sh:declare [ sh:prefix "rdf" ;
                                             sh:namespace
                                                       "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                  sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :isIn ?current ;
                          :to ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :isIn ?tile.
                    ?current :bl+ ?intermediate .
                    ?intermediate :bl* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate)
                  }
            """ ].


:MoveSideways
    a sh:NodeShape ;
    sh:sparql [
                  a sh:SPARQLConstraint ;
                sh:message  "Invalid move: not on same row." ;
                sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                           sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                              sh:declare [ sh:prefix "rdf" ;
                                           sh:namespace
                                                     "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
                sh:select   """
      SELECT $this
      WHERE {
        $this :isIn ?current ;
              :to ?target .
        ?current :row ?row1.
        ?target :row ?row2.
        FILTER (?row1 != ?row2)
      }
    """ ];
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :isIn ?current ;
                          :to ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :isIn ?tile.
                    ?current :right+ ?intermediate .
                    ?intermediate :right* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate)
                  }
            """ ];
    sh:sparql [
          a           sh:SPARQLConstraint ;
          sh:message  "Invalid move: overtaking is not allowed." ;
          sh:prefixes [ sh:declare [ sh:prefix    "" ;
                                     sh:namespace "http://example.org/chess/"^^xs:anyURI ; ] ;
                        sh:declare [ sh:prefix "rdf" ;
                                     sh:namespace
                                               "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xs:anyURI ; ] ] ;
          sh:select   """
                  SELECT $this ?current ?target ?intermediate
                  WHERE {
                    $this :isIn ?current ;
                          :to ?target .
                    ?piece2 rdf:type :ChessPiece.
                    ?piece2 :isIn ?tile.
                    ?current :left+ ?intermediate .
                    ?intermediate :left* ?target .
                    FILTER ($this != ?piece2 && ?tile = ?intermediate)
                  }
            """ ].


:MovedAdjacentTo
    a sh:NodeShape ;
    sh:or(
            [
                sh:path (:isIn :above );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :below );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :left );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :right );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :tl );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :tr );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :bl );
                sh:equals :to;
            ]
            [
                sh:path (:isIn :br );
                sh:equals :to;
            ]
         ).


:hasBeenCaptured
    a sh:NodeShape ;
    sh:property [
          sh:path :to;
          sh:hasValue :out;
      ];
    sh:property [
          sh:path :isIn;
          sh:property [
                      sh:path [sh:inversePath :to];
                      sh:minCount 1;
                  ]
      ].